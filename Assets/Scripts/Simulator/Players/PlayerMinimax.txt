using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class PlayerMinimax : Player
{
    LoRBoard board;
    int playerNumber;
    Deck deck;
    Bench bench;
    Bench opposingBench;
    Hand hand;
    Hand opposingHand;
    Mana mana;
    Mana opposingMana;
    Nexus nexus;
    Nexus opposingNexus;

    float nexusHealthValue = 1f;


    public PlayerMinimax(LoRBoard board, int playerNumber, Deck deck)
    {
        this.board = board;
        this.playerNumber = playerNumber;
        this.deck = deck;
        SetUpRelativeVariables();
    }

    private void SetUpRelativeVariables()
    {
        if (playerNumber == 1)
        {
            bench = board.playerOneBench;
            opposingBench = board.playerTwoBench;
            hand = board.playerOneHand;
            opposingHand = board.playerTwoHand;
            mana = board.playerOneMana;
            opposingMana = board.playerTwoMana;
            nexus = board.playerOneNexus;
            opposingNexus = board.playerTwoNexus;
        }
        else
        {
            bench = board.playerTwoBench;
            opposingBench = board.playerOneBench;
            hand = board.playerTwoHand;
            opposingHand = board.playerOneHand;
            mana = board.playerTwoMana;
            opposingMana = board.playerOneMana;
            nexus = board.playerTwoNexus;
            opposingNexus = board.playerOneNexus;
        }
    }

    public override Deck Deck()
    {
        return deck;
    }

    private bool HasAttackToken()
    {
        if (playerNumber == 1)
        {
            return board.playerOneAttackToken;
        }
        return board.playerTwoAttackToken;
    }

    private bool OpponentHasAttackToken()
    {
        if (playerNumber == 1)
        {
            return board.playerTwoAttackToken;
        }
        return board.playerOneAttackToken;
    }

    public override Action MakeAction()
    {
        List<Action> legalActions = LegalActions();
        Dictionary<Action, float> expectedEvals = new Dictionary<Action, float>();

        foreach (Action action in legalActions)
        {
            expectedEvals.Add(action, 0);
        }

        //evaluate board state after action has been played
        foreach (KeyValuePair<Action, float> entry in expectedEvals)
        {
            switch (entry.Key.command)
            {
                case "Pass":
                    expectedEvals[entry.Key] = BoardEvaluation();
                    break;

                case "Play":
                    expectedEvals[entry.Key] = BoardEvaluation.Evaluation() + PlayValue(entry.Key.target);
                    break;

                case "Attack":
                    //try out all attacks?
                    break;

                case "Block":
                    //try out all blocks...somehow
                    Battlefield.BattlePair bestBlock = null;
                    float bestBlockEvaluation = float.MinValue;
                    float currentEvaluation = float.MinValue;

                    foreach (Battlefield.BattlePair pair in board.battlefield.battlingUnits)
                    {
                        if (pair.blocker != null)
                        {
                            foreach (UnitCard unit in bench.units)
                            {
                                //test board eval with the block, save it if it's the best block
                                currentEvaluation = BoardEvaluation.Evaluation() + PlayValue(entry.Key.target);
                            }
                        }
                    }
                    break;


            }


            //if only passing are legal


            return null;
        }
    }

    /**
    public float BlockValue(Battlefield.BattlePair pair)
    {
        float healthLost = 0;

        //check difference in evaluation upon resolution of combat...
        if (pair.blocker == null)
        {
            healthLost = pair.attacker.power;
            return -(healthLost * nexusHealthValue);
        }

        if (pair.attacker.power > pair.blocker.health)
        {
            if (pair.attacker.HasKeyword(Keyword.Overwhelm))
            {
                healthLost = pair.attacker.power - pair.attacker.health;
                if (pair.blocker.HasKeyword(Keyword.Tough)){
                    healthLost = healthLost - 1;
                }
            }

            if (pair.attacker.HasKeyword(Keyword.QuickAttack))
            {

            }
        }

    }
    **/

    public float PlayValue(UnitCard unit)
    {
        return (unit.power + unit.health);
        //return (unit.power + unit.health) * (OpponentHasAttackToken() && unit.HasKeyword(Keyword.CantBlock) ? 0 : 1);
    }

    public float BoardEvaluation()
    {
        float benchEval = bench.units.Sum(x => x.power + x.health) - opposingBench.units.Sum(x => x.power + x.health);
        float battleEval = 0;
        if (board.inCombat)
        {
            foreach (Battlefield.BattlePair pair in board.battlefield.battlingUnits)
            {
                int attackEval = pair.attacker != null ? pair.attacker.power + pair.attacker.health : 0;
                int blockEval = pair.blocker != null ? pair.blocker.power + pair.blocker.health : 0;
                if (board.attackingPlayer == playerNumber)
                {
                    battleEval += attackEval - blockEval;
                }
                else
                {
                    battleEval += blockEval - attackEval;
                }
            }
        }
        return bench.units.Sum(x => x.power + x.health) - opposingBench.units.Sum(x => x.power + x.health);
    }

    public List<Action> LegalActions()
    {
        List<Action> legalActions = new List<Action>();

        //play, attack, block, pass

        //play cards you can afford (todo: check conditions)
        if (!board.inCombat)
        {
            foreach (Card card in hand.cards)
            {
                if (card.cost <= mana.manaGems)
                {
                    legalActions.Add(new Action("Play", card));
                }
            }

            //attack with units (maybe refactor to let player declare one at a time)
            if (HasAttackToken())
            {
                legalActions.Add(new Action("Attack", bench.units));
            }
        }

        //block with units (same idea)
        if (board.inCombat && !board.blocked)
        {
            legalActions.Add(new Action("Block"));
        }

        legalActions.Add(new Action("Pass"));

        return legalActions;
    }
}